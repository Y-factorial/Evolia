
#include "TileShaderCommon.cginc"

#define MATRIX_COUNT (12+11)

static const fixed3x3 colorMatrices[MATRIX_COUNT] =
{
    { 1.00000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f },
    { 0.78806f, -0.26171f, 0.47365f, 0.10004f, 1.03182f, -0.13185f, -0.36496f, 0.45329f, 0.91167f },
    { 0.42204f, -0.26171f, 0.83967f, 0.23034f, 0.97874f, -0.20909f, -0.57506f, 0.97671f, 0.59835f },
    { -0.00000f, 0.00000f, 1.00000f, 0.35600f, 0.85500f, -0.21100f, -0.57400f, 1.43000f, 0.14400f },
    { -0.36496f, 0.45329f, 0.91167f, 0.44334f, 0.69374f, -0.13709f, -0.36206f, 1.69171f, -0.32965f },
    { -0.57506f, 0.97671f, 0.59835f, 0.46896f, 0.53818f, -0.00715f, 0.00396f, 1.69171f, -0.69567f },
    { -0.57400f, 1.43000f, 0.14400f, 0.42600f, 0.43000f, 0.14400f, 0.42600f, 1.43000f, -0.85600f },
    { -0.36206f, 1.69171f, -0.32965f, 0.32596f, 0.39818f, 0.27585f, 0.79096f, 0.97671f, -0.76767f },
    { 0.00396f, 1.69171f, -0.69567f, 0.19566f, 0.45126f, 0.35309f, 1.00106f, 0.45329f, -0.45435f },
    { 0.42600f, 1.43000f, -0.85600f, 0.07000f, 0.57500f, 0.35500f, 1.00000f, 0.00000f, 0.00000f },
    { 0.79096f, 0.97671f, -0.76767f, -0.01734f, 0.73626f, 0.28109f, 0.78806f, -0.26171f, 0.47365f },
    { 1.00106f, 0.45329f, -0.45435f, -0.04296f, 0.89182f, 0.15115f, 0.42204f, -0.26171f, 0.83967f },
    // type 2
    { 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f }, // R
    { 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.50000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f }, // O
    { 1.00000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f }, // Y
//  { 0.50000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f }, // L L2 との違いが分かりにく過ぎる
    { 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f }, // L2
    { 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 0.50000f }, // L3
    { 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f }, // C
    { 0.25000f, 0.00000f, 0.00000f, 0.00000f, 0.50000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f }, // S
    { 0.25000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f }, // B
    { 0.50000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f }, // P
    { 1.25000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f, 0.00000f, 0.00000f, 0.00000f, 1.00000f }, // M
    { 1.25000f, 0.00000f, 0.00000f, 0.00000f, 0.25000f, 0.00000f, 0.00000f, 0.00000f, 0.50000f }, // M2
    
};

/*
 * インデックステクスチャから色を取得する
 * uv: テクスチャ座標
 */
fixed4 GetColor(float2 uv)
{
    // 描画対象のテクスチャからインデックス値を取得
    // r = index/255, g = scale, b = colorMatrix/255, a = alpha
    float4 index = tex2D(_MainTex, uv);

#if _USE_SCALE
    // 拡大が有効で、倍率が0なら、先に進む意味がない
    if (index.g==0)
    {
        discard;
    }
#endif
    
#if _USE_ALPHA
    // 透明度が0なら、先に進む意味がない
    if (index.a==0)
    {
        discard;
    }
#endif
    
    fixed4 color = GetScaleAndInterporatedColor(index.r * 255, index.g, uv);
    
#if _USE_COLOR_MATRIX
    int m = round(index.b*255)%MATRIX_COUNT;
    if (m!=0)
    {
        color.rgb = mul(colorMatrices[m], color.rgb);
    }
#endif
    
#if _USE_ALPHA
    color.a *= index.a;
#endif
    
    return color;
}

fixed4 frag (v2f i) : SV_Target
{
    RectMaskAndPixelPerfect(i);
    
    fixed4 color = GetColor(i.uv);
    
    return color;
}
